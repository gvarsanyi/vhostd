// Generated by CoffeeScript 1.6.3
(function() {
  var child_process, config, file_name, fs, iniparser, load, log, resume, server_port, start_event_bindings, stderr, stop_event_bindings, suspend, suspended, validate_port, watcher;

  child_process = require('child_process');

  fs = require('fs');

  iniparser = require('iniparser');

  log = require('./log');

  stderr = require('./stderr');

  file_name = '/etc/vhostd.ini';

  config = null;

  server_port = null;

  suspended = 'booting';

  start_event_bindings = [];

  stop_event_bindings = [];

  watcher = null;

  module.exports.attachStartEvent = function(callback) {
    return start_event_bindings.push(callback);
  };

  module.exports.attachStopEvent = function(callback) {
    return stop_event_bindings.push(callback);
  };

  module.exports.getPort = function() {
    return server_port;
  };

  module.exports.getTarget = function(hostname) {
    var target;
    target = config[hostname].shift();
    config[hostname].push(target);
    return target;
  };

  module.exports.isRunnable = function() {
    return !suspended;
  };

  suspend = function(reason) {
    var callback, was_suspended, _i, _len, _results;
    log('suspending:', reason);
    was_suspended = suspended;
    suspended = reason;
    if (!was_suspended) {
      _results = [];
      for (_i = 0, _len = stop_event_bindings.length; _i < _len; _i++) {
        callback = stop_event_bindings[_i];
        _results.push(callback());
      }
      return _results;
    }
  };

  resume = function() {
    var callback, was_suspended, _i, _len, _results;
    was_suspended = suspended;
    suspended = false;
    if (was_suspended) {
      _results = [];
      for (_i = 0, _len = start_event_bindings.length; _i < _len; _i++) {
        callback = start_event_bindings[_i];
        _results.push(callback());
      }
      return _results;
    }
  };

  validate_port = function(port) {
    return typeof port === 'number' && port > 0 && port < 49151 && port % 1 === 0;
  };

  load = function() {
    if (watcher) {
      watcher.close();
    }
    try {
      watcher = fs.watch(file_name, function(event) {
        var forced_restart;
        forced_restart = function() {
          suspend('config file changed, restarting service');
          child_process.exec('nohup vhostd restart > /dev/null 2>&1 &');
          return process.exit(0);
        };
        return fs.readFile(file_name, {
          encoding: 'utf8'
        }, function(err, data) {
          var inf, _ref;
          if (err) {
            return forced_restart();
          }
          try {
            inf = iniparser.parseString(data);
            if (Number(inf != null ? (_ref = inf.SERVER) != null ? _ref.port : void 0 : void 0) === server_port) {
              return load();
            }
            return forced_restart();
          } catch (_error) {
            err = _error;
            return forced_restart();
          }
        });
      });
    } catch (_error) {}
    return fs.readFile(file_name, {
      encoding: 'utf8'
    }, function(err, data) {
      var alias, aliases, count, found_one, inf, parse_multi, spec, target, _ref;
      if (err) {
        return suspend(err);
      }
      try {
        inf = iniparser.parseString(data);
      } catch (_error) {}
      if (!validate_port(Number(inf != null ? (_ref = inf.SERVER) != null ? _ref.port : void 0 : void 0))) {
        return suspend('missing or invalid port config');
      }
      server_port = Number(inf.SERVER.port);
      count = 0;
      aliases = {};
      config = {};
      parse_multi = function(target, spec) {
        var addrs, host, normalize, port, ports, targets, _i, _j, _k, _len, _len1, _len2;
        normalize = function(str) {
          str = String(str).replace(',', ' ').replace('\t', ' ');
          while (str.indexOf('  ') > -1) {
            str = str.replace('  ', ' ');
          }
          return str.split(' ');
        };
        addrs = normalize(spec.address);
        ports = normalize(spec.port);
        for (_i = 0, _len = ports.length; _i < _len; _i++) {
          port = ports[_i];
          if (!validate_port(Number(port))) {
            stderr('skipping invalid target:', target);
            return false;
          }
        }
        targets = [];
        if (addrs.length > 1 && ports.length === 1) {
          for (_j = 0, _len1 = addrs.length; _j < _len1; _j++) {
            host = addrs[_j];
            targets.push({
              host: host,
              port: ports[0]
            });
          }
        } else if (addrs.length === 1 && ports.length > 1) {
          for (_k = 0, _len2 = ports.length; _k < _len2; _k++) {
            port = ports[_k];
            targets.push({
              host: addrs[0],
              port: port
            });
          }
        } else if (addrs.length === 1 && ports.length === 1) {
          targets.push({
            host: addrs[0],
            port: ports[0]
          });
        } else {
          stderr('skipping invalid target:', target);
          return false;
        }
        config[target] = targets;
        count += 1;
        return true;
      };
      for (target in inf) {
        spec = inf[target];
        if (!(target !== 'SERVER')) {
          continue;
        }
        if (spec.ref == null) {
          parse_multi(target, spec);
          continue;
        }
        if ((spec.address != null) && (spec.port != null)) {
          if (parse_multi(target, spec)) {
            stderr('skipping ref from ambiguos target:', target);
          }
        } else {
          aliases[target] = spec.ref;
          if ((spec.address != null) || (spec.port != null)) {
            stderr('skipping address/port from ambiguos target:', target);
          }
        }
      }
      found_one = count;
      while (found_one) {
        found_one = false;
        for (alias in aliases) {
          target = aliases[alias];
          if (config[target] != null) {
            config[alias] = config[target];
            delete aliases[alias];
            found_one = true;
          }
        }
      }
      for (alias in aliases) {
        target = aliases[alias];
        stderr('skipping reference without existing target:', alias);
      }
      if (!count) {
        return suspend('no valid target was found');
      }
      log('config file', file_name, 'loaded');
      return resume();
    });
  };

  fs.exists(file_name, function(exists) {
    var cfg_str;
    if (exists) {
      return load();
    }
    cfg_str = '[SERVER]\nport = 80\n\n' + '[example.com]\naddress = 127.0.0.1\nport = 8000\n\n' + '[alias.example.com]\nref = example.com\n\n' + '[other.com]\naddress = 127.0.0.1\nport = 9000\n';
    return fs.writeFile(file_name, cfg_str, {
      encoding: 'utf8'
    }, function(err) {
      if (err) {
        stderr('ERROR: ' + file_name + ' missing, cant create it.');
        process.exit(1);
      }
      return load();
    });
  });

}).call(this);
