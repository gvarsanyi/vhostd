#!/usr/bin/env node
// Generated by CoffeeScript 1.6.3
(function() {
  var child_process, get_pid, log, start, stderr, stop, task;

  child_process = require('child_process');

  get_pid = require('./lib/get_pid');

  log = require('./lib/log');

  stderr = require('./lib/stderr');

  task = process.argv[2] || 'soft-start';

  start = function() {
    var cmd;
    require('./tasks/require-root');
    process.chdir(__dirname);
    cmd = 'nohup ./vhostd-service.js >> /var/log/vhostd 2>&1 &';
    return child_process.exec(cmd, function(err) {
      if (err) {
        return stderr('ERROR', err);
      }
      return get_pid(function(err, pid) {
        if (!err && pid) {
          return log('started:', pid);
        } else {
          return stderr('attempted to start, but can not find pid. Check /var/log/vhostd');
        }
      });
    });
  };

  stop = function(pid, callback) {
    var check, check_intervals;
    check = function() {
      return get_pid(function(err, instance_pid) {
        if (instance_pid) {
          if (check_intervals.length) {
            return setTimeout(check, check_intervals.shift());
          } else {
            stderr('previous instance is not responsive, force-killing it');
            try {
              process.kill(pid, 'SIGKILL');
            } catch (_error) {}
            return setTimeout(function() {
              return get_pid(function(err, instance_pid) {
                if (instance_pid) {
                  stderr('could not kill previous instance: ' + pid);
                  process.exit(1);
                }
                log('stopped');
                if (callback) {
                  return callback();
                }
              });
            }, 500);
          }
        } else {
          log('stopped');
          if (callback) {
            return callback();
          }
        }
      });
    };
    require('./tasks/require-root');
    log('stopping vhostd process:', pid);
    try {
      process.kill(pid);
    } catch (_error) {}
    check_intervals = [50, 150, 300, 500, 500, 500];
    return setTimeout(check, check_intervals.shift());
  };

  get_pid(function(err, pid) {
    if (err) {
      stderr(err);
      process.exit(1);
    }
    switch (task) {
      case 'restart':
        if (pid) {
          return stop(pid, start);
        }
        log('vhostd service is not running');
        return start();
      case 'start':
        if (!pid) {
          return start();
        }
        log('vhostd service is already running');
        return stop(pid, start);
      case 'soft-start':
        if (pid) {
          return log('vhostd service is already running');
        }
        return start();
      case 'stop':
        if (!pid) {
          return log('vhostd service was not running');
        }
        return stop(pid);
      case 'status':
        return log('vhostd service is ' + (pid ? 'running: ' + pid : 'stopped'));
      default:
        stderr('[vhostd] unknown task:', task);
        return process.exit(1);
    }
  });

}).call(this);
