// Generated by CoffeeScript 1.6.3
(function() {
  var config, file_name, fs, load, resume, start_event_bindings, stop_event_bindings, suspend, suspended, validate_port, validate_spec, watcher;

  fs = require('fs');

  file_name = '/etc/vhostd.json';

  config = null;

  suspended = 'booting';

  start_event_bindings = [];

  stop_event_bindings = [];

  watcher = null;

  module.exports = {
    attachStartEvent: function(callback) {
      return start_event_bindings.push(callback);
    },
    attachStopEvent: function(callback) {
      return stop_event_bindings.push(callback);
    },
    getPort: function() {
      if (suspended) {
        return null;
      }
      return config.port;
    },
    getTargets: function() {
      if (suspended) {
        return null;
      }
      return config.targets;
    },
    isRunnable: function() {
      return !suspended;
    }
  };

  suspend = function(reason) {
    var callback, was_suspended, _i, _len, _results;
    console.log('[' + (new Date).toUTCString() + '] Suspending for: ' + reason);
    was_suspended = suspended;
    suspended = reason;
    if (!was_suspended) {
      _results = [];
      for (_i = 0, _len = stop_event_bindings.length; _i < _len; _i++) {
        callback = stop_event_bindings[_i];
        _results.push(callback());
      }
      return _results;
    }
  };

  resume = function() {
    var callback, was_suspended, _i, _len, _results;
    was_suspended = suspended;
    suspended = false;
    if (was_suspended) {
      _results = [];
      for (_i = 0, _len = start_event_bindings.length; _i < _len; _i++) {
        callback = start_event_bindings[_i];
        _results.push(callback());
      }
      return _results;
    }
  };

  validate_port = function(port) {
    return typeof port === 'number' && port > 0 && port < 49151 && port % 1 === 0;
  };

  validate_spec = function(spec) {
    var host, _i, _len;
    if (typeof spec === 'string') {
      return true;
    }
    if (typeof spec === 'object' && (spec != null ? spec.length : void 0)) {
      for (_i = 0, _len = spec.length; _i < _len; _i++) {
        host = spec[_i];
        if (typeof host !== 'string') {
          return false;
        }
      }
      return true;
    }
    return false;
  };

  load = function() {
    if (watcher) {
      watcher.close();
    }
    try {
      watcher = fs.watch(file_name, function(event) {
        suspend('config file changed');
        return load();
      });
    } catch (_error) {}
    return fs.readFile(file_name, {
      encoding: 'utf8'
    }, function(err, str) {
      var count, host, port, spec, target, _ref, _ref1;
      if (err) {
        return suspend(err);
      }
      try {
        config = JSON.parse(str);
      } catch (_error) {}
      if (!validate_port(config != null ? config.port : void 0)) {
        return suspend('missing or invalid port config');
      }
      if (!((config != null ? config.targets : void 0) && typeof config.targets === 'object')) {
        return suspend('missing or invalid targets object in config');
      }
      count = 0;
      _ref = config.targets;
      for (target in _ref) {
        spec = _ref[target];
        _ref1 = target.split(':'), host = _ref1[0], port = _ref1[1];
        if (!validate_port(Number(port && host.length))) {
          process.stderr.write('skipping invalid target "' + target + '"\n');
        } else if (!validate_spec(spec)) {
          process.stderr.write('skipping target "' + target + '" with invalid ' + 'specs: ' + JSON.stringify(spec) + '\n');
        } else {
          count += 1;
        }
      }
      if (!count) {
        return suspend('no valid target was found');
      }
      return resume();
    });
  };

  fs.exists(file_name, function(exists) {
    var cfg_str;
    if (exists) {
      return load();
    }
    cfg_str = JSON.stringify({
      port: 80,
      targets: {}
    }, null, 2);
    return fs.writeFile(file_name, cfg_str, {
      encoding: 'utf8'
    }, function(err) {
      if (err) {
        process.stderr.write('ERROR: ' + file_name + ' missing, cant create it.\n');
        process.exit(1);
      }
      return load();
    });
  });

}).call(this);
